services:
  task-api:
    build: .
    container_name: task_api_container
    ports:
      - 3000:3000
    volumes:
      - ./:/app 
      - /app/node_modules 
    environment:
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      MODE: ${MODE:-start}
    entrypoint: /app/entrypoint.sh
    depends_on:
      postgresql_db:
        condition: service_healthy # Ensure task-api waits for db to be healthy
    command: /bin/sh -c "if [ \"$MODE\" = 'dev' ]; then npm run dev; elif [ \"$MODE\" = 'test' ]; then npm run test; else npm run start; fi"
  
  postgresql_db:
    image: postgres:16.4
    container_name: db_container
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - 5433:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DATABASE_USER}", "-d", "${DATABASE_NAME}", "-h", "localhost"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s
volumes:
  postgres_data:
