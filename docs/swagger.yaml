openapi: 3.0.0
info:
  title: Express API
  description: API for managing users and tasks
  version: 1.0.0
servers:
  - url: http://localhost:3000
paths:
  /api/users:
    get:
      summary: Get all users
      description: Fetch all users. Accessible only by admins.
      operationId: getAllUsers
      security:
        - jwt: []
      tags:
        - Users
      responses:
        '200':
          description: Successfully retrieved users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    email:
                      type: string
                      example: user1@example.com
                    firstName:
                      type: string
                      example: "User"
                    lastName:
                      type: string
                      example: "Userson"
                    username:
                      type: string
                      example: user1
                    password:
                      type: string
                      example: $2b$10$9vcqIH0RP07KTvUS2qfebuoHSsjHR3WzzI4KWNNrUyPtaC6eogquW
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (admin privileges required)

    post:
      summary: User signup
      description: Register a new user. Requires email and password validation.
      operationId: signup
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:             
                email:
                  type: string
                  example: user1@example.com
                firstName:
                  type: string
                  example: "User"
                lastName:
                  type: string
                  example: "Userson"
                username:
                  type: string
                  example: user1
                password:
                  type: string
                  example: password
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User successfully created
        '400':
          description: Bad request (validation errors)
        '409':
          description: Conflict (email or username already taken)

  /api/users/login:
    post:
      summary: User login
      description: Login to the application by providing a username and password.
      operationId: login
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
        '400':
          description: Bad request (missing or invalid data)
        '401':
          description: Unauthorized (invalid credentials)

  /api/tasks:
    get:
      summary: Get tasks
      description: Retrieve a list of tasks belonging to a user, or a list of all tasks if the user has admin privileges
      operationId: getTasks
      security:
        - jwt: []
      tags:
        - Tasks
      parameters:
        - name: sorting
          in: query
          description: Sorting order ("new" or "old")
          required: false
          schema:
            type: string
            example: new
        - name: page
          in: query
          description: Select which page
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Select how many tasks per page
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      example: 1
                      type: integer
                    body:
                      example: "Task text body"
                      type: string
                    userId:
                      example: 5
                      type: integer
        '400':
          description: Bad request (invalid query parameters)
        '401':
          description: Unauthorized

    post:
      summary: Create a new task
      description: Adds a new task to the system. Admins are prohibited from creating tasks.
      operationId: addTask
      security:
        - jwt: []
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  example: Task text body
                  type: string
               
              required:
                - body
      responses:
        '201':
          description: Task successfully created
        '400':
          description: Bad request (validation errors)
        '403':
          description: Forbidden (admins are prohibited from creating tasks)
        '401':
          description: Unauthorized

    put:
      summary: Edit an existing task
      description: Modify the details of an existing task.
      operationId: editTask
      security:
        - jwt: []
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          description: ID of the task to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  example: Task text body
                  type: string
              required:
                - body
      responses:
        '200':
          description: Task successfully updated
        '400':
          description: Bad request (validation errors)
        '404':
          description: Task not found
        '401':
          description: Unauthorized

    delete:
      summary: Delete a task
      description: Remove a task from the system.
      operationId: removeTask
      security:
        - jwt: []
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          description: ID of the task to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Task successfully deleted
        '404':
          description: Task not found
        '401':
          description: Unauthorized

components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
